doctype html
html
  include includes/head.pug
  title Commands | wushi
  body
    nav.navbar.has-shadow.is-spaced(role="navigation", aria-label="main navigation")
      div.container.is-fluid.is-navbar
        a.navbar-brand(href="/", style="margin-right: 8px")
            figure(class="image is-48x48")
                img(class="image is-48x48", src="/assets/graphic.png")  
        a.navbar-burger(role="button", data-target="navbar", aria-label="menu", aria-expanded="false")
            span(aria-hidden="true")
            span(aria-hidden="true")
            span(aria-hidden="true")    
        div.navbar-menu.is-active(id="navbar")
          div.navbar-start
              a.navbar-item(href="/invite") <i class="fas fa-user-plus"></i>&nbsp;Invite
              a.navbar-item(href="/commands") <i class="fas fa-book"></i>&nbsp;Commands
          div.navbar-end
            a.navbar-item(href="/vote", style="margin-right: 8px") <i class="fas fa-check"></i>&nbsp;Vote
            a.navbar-item(href="/community", style="margin-right: 12px") <i class="fab fa-discord"></i>&nbsp;Support Server
            if user
              span 
              a.navbar-brand(href="/", style="margin-left: 6px")
                figure(class="image is-48x48")
                  img(class="is-rounded", src=avatar) 
                a.navbar-item(href="#", style="margin-right: -22px") <strong>#{user.username}##{user.discriminator}</strong>
            else
              a.navbar-item.is-primary.button(href="/login") <i class="fab fa-discord"></i>&nbsp;Login with Discord
    div(align="center")                  
      section.hero.is-small.is-primary.is-bold
        .hero-body
          .container
            figure(class="image is-128x128 animated pulse", style="margin-bottom: -10px")
                img(class="image", src="/assets/graphic.png") 
            h1.title(style="font-weight: bold") <strong>Commands</strong>
    - const commandsList = list;
    - const commandsInCategory = [];
    -
      const categories = []
      commandsList.forEach(command => {
        const category = command.category
        if (!categories.includes(category)) {
            let check;
            if (category === 'Admin') check = false;
            else check = true;
            if (check) categories.push(category);
        }
      })
    -
      commandsList.forEach(command => {
        if (commandsInCategory[command.category] === undefined) {
          commandsInCategory[command.category] = [];
        }
        commandsInCategory[command.category].push({ name: command.name, aliases: command.aliases, category: command.category, cooldown: command.cooldown, usage: command.usage, description: command.description })
      })
    br
    div.container.columns.is-multiline.is-centered(align="center")
      each category in categories 
        div.column.is-one-half
          div.box
            h1.title #{category}
            div.table-container
              table.table
                thead 
                  tr 
                    th Name
                    th Description 
                    th Usage
                    th Aliases
                    th Cooldowns 
                tbody
                  tr 
                    each command in commandsInCategory[category] 
                      - var aliases = command.aliases.join(', ')
                      th #{command.name}
                      td #{command.description}
                      td #{command.usage}
                      td #{aliases}
                      td #{command.cooldown}s
                      tr

                


  br
  footer.footer
    div(align="center")
      div.container
        p <strong><a href="https://github.com/xMinota">Minota</a></strong> Â© 2020 - 2021     

